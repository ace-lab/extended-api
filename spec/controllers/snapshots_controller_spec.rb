require 'rails_helper'
require 'support/tracker_api'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.
#
# Also compared to earlier versions of this generator, there are no longer any
# expectations of assigns and templates rendered. These features have been
# removed from Rails core in Rails 5, but can be added back in via the
# `rails-controller-testing` gem.

RSpec.configure do |config|
  config.include TrackerApi
end

RSpec.describe SnapshotsController, type: :controller do

  # This should return the minimal set of attributes required to create a valid
  # Snapshot. As you add validations to Snapshot, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    { snapshot: { tracker_project: 1, tracker_token: 'test' }}
  }

  let(:invalid_attributes) {
    { snapshot: { tracker_project: 1 } }
  }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # SnapshotsController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  describe 'GET /snapshots/1/api_spec' do
    before :each do
      stub_tracker
      Snapshot.create_tracker(tracker_project: 1, tracker_token: 'test')
    end

    it 'returns true if the project is set up' do
      get :api_spec, params: { project_id: 1 }
      expect(JSON.parse(response.body)['ready']).to be_truthy
    end

    it 'retruns false if the project is not ready' do
      get :api_spec, params: { project_id: 2 }
      expect(JSON.parse(response.body)['ready']).to be_falsey
    end
  end

  describe 'POST /snapshots' do
    before :each do
      stub_tracker(1)
      stub_tracker(2)
      Snapshot.create_tracker(tracker_project: 2, tracker_token: 'test')
    end

    it 'creates a new project with valid parameters' do
      expect { post :create, params: valid_attributes }.to(change { Snapshot.count })
    end

  end
end
